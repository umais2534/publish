import "@testing-library/jest-dom";

// Mock the URL.createObjectURL and URL.revokeObjectURL
(window.URL.createObjectURL as jest.Mock) = jest.fn(() => "blob:mock-url");
(window.URL.revokeObjectURL as jest.Mock) = jest.fn();

// Use Jest's built-in fake timers instead of manual mocking
jest.useFakeTimers();

// Optional: Add global test utilities or custom matchers
// For example, you can add custom jest matchers for testing-library
import * as matchers from '@testing-library/jest-dom/matchers';
expect.extend(matchers);

// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}));

// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}));

// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(), // Deprecated
    removeListener: jest.fn(), // Deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

// Mock scrollTo
window.scrollTo = jest.fn();

// Mock console.error to reduce noise in tests but still see real errors
const originalError = console.error;
beforeAll(() => {
  console.error = (...args: any[]) => {
    if (
      typeof args[0] === 'string' &&
      args[0].includes('Warning: ReactDOM.render is no longer supported')
    ) {
      return;
    }
    originalError.call(console, ...args);
  };
});

afterAll(() => {
  console.error = originalError;
});

// Clean up after each test
afterEach(() => {
  jest.clearAllMocks();
  jest.useRealTimers();
});

beforeEach(() => {
  jest.useFakeTimers();
});